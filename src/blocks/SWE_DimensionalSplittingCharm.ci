module SWE_DimensionalSplittingCharm {
	//include "types/BlockConnectInterface.hh";
	include "types/Boundary.hh";
	include "scenarios/SWE_Scenario.hh";
	include "tools/Float2DNative.hh";
    include "tools/CollectorCharm.hpp";

	message copyLayer {
		Boundary boundary;
		bool containsBathymetry;
		bool isDummy;
		float b[];
		float h[];
		float hu[];
		float hv[];
		float timestep;
	};

	array [1D] SWE_DimensionalSplittingCharm {
		entry SWE_DimensionalSplittingCharm(int nx, int ny, float dy, float dx, float originX, float originY, int posX, int posY,
							BoundaryType boundaries[4], std::string outputFilename, std::string bathymetryFile, std::string displacementFile,bool localTimestepping,bool write);

		entry void compute() {
		    if(localTimestepping && firstIteration){

                //set up max possible timestep in beginning of execution
                serial{
                     computeMaxTimestep( 0.01,0.4);
                     CkCallback cb(CkReductionTarget(SWE_DimensionalSplittingCharm, reduceWaveSpeed), thisProxy);
                     contribute(sizeof(float), &maxTimestep, CkReduction::max_float, cb);
                 }
                 when reductionTrigger()
                 serial {
                    maxTimestepLocal = maxTimestep;
                    maxTimestepLocal = 1.0f;
                 }
            }
            if(currentCheckpoint < checkpointCount) {
		    serial {
                                             collector->startCounter(Collector::CTR_WALL);

				// Start the wall clock
                if(firstIteration){
                    collector->startCounter(Collector::CTR_WALL);
                }


			}


				serial {
					collector->startCounter(Collector::CTR_EXCHANGE);

                    sendCopyLayers(firstIteration);
                    setGhostLayer();
                    firstIteration = false;


				}
				overlap {
					when receiveGhostLeft(copyLayer *msg)

						serial { processCopyLayer(msg); }

					when receiveGhostRight(copyLayer *msg)

						serial { processCopyLayer(msg); }

					when receiveGhostBottom(copyLayer *msg)

						serial { processCopyLayer(msg); }

					when receiveGhostTop(copyLayer *msg)

						serial { processCopyLayer(msg); }

				}
				serial {

				     checkAllGhostlayers(); // after receiving all Ghostlayers we can processes them
					// The xSweep will trigger the reduction and accumulate compute time
					 collector->stopCounter(Collector::CTR_EXCHANGE);
					if(allGhostlayersInSync()){
					    xSweep();
					}
				}
				if(!localTimestepping){
                    when reductionTrigger()
				    serial{
				    }
				}
				serial {
					// Complete iteration
                    if(allGhostlayersInSync()){
					    updateUnknowns(maxTimestep);
                    }




                        // Once the simulation state progressed one iteration, increase the simulation time accordingly
                        if((!localTimestepping || hasMaxLocalTimestep()) ){
                            currentSimulationTime +=localTimestepping?maxTimestepLocal:maxTimestep;

                            resetStepSizeCounter();

                        }
                        // If a checkpoint was reached after the last step, write current state
                        if (  currentSimulationTime >= checkpointInstantOfTime[currentCheckpoint]) {

                             collector->stopCounter(Collector::CTR_WALL);

                            if(thisIndex == 0) {
                                CkPrintf("Write timestep (%fs)\n", currentSimulationTime);
                            }

                            writeTimestep();
                            currentCheckpoint++;

                            // Restart wall clock

                             collector->startCounter(Collector::CTR_WALL);
                        }
                         collector->stopCounter(Collector::CTR_WALL);

                        }

					}
					serial{
					iterations++;
                    if(iterations%1 == 0){
                        AtSync();

                    }else{
                        thisProxy[thisIndex].compute();
                    }

					}


		};

		// SDAG entry methods
		entry void receiveGhostLeft(copyLayer *msg);
		entry void receiveGhostRight(copyLayer *msg);
		entry void receiveGhostBottom(copyLayer *msg);
		entry void receiveGhostTop(copyLayer *msg);

		entry void reductionTrigger();

		// entry methods
		entry [reductiontarget] void reduceWaveSpeed(float maxWaveSpeed);
	};
};
